(function() {

    module( 'Diff Sync integration test' );


    asyncTest( 'patch - simulate a sync update/patch', function () {
        var documentId = uuid();
        var clientId = "testClientId";
        var addDocument = { msgType: 'add', docId: documentId, clientId: clientId, content: 'Do or do not, there is no try.' };
        // the clients diffs would be generated by the client side JS library.
        var clientEdits = { msgType: 'edits', 
            docId: documentId, 
            clientId: clientId, 
            version: 0, 
            checksum: '', 
            diffs: [{operation: 'UNCHANGED', text: 'Do or do not, there is no try'},{operation: 'DELETE', text: '.'},{operation: 'ADD', text: '!'}]}
        var url = 'ws://localhost:7777/sync';
        var ws = new WebSocket(url);

        ws.onopen = function( evt ) {
            ws.send( JSON.stringify ( addDocument ) );
            ws.send( JSON.stringify ( clientEdits ) );
        };

        var counter = 0;
        ws.onmessage = function( evt ) {
            var json = JSON.parse( evt.data );
            switch ( counter ) {
                case 0: 
                    equal( json.result, 'ADDED', 'Document should have been added' );
                    break;
                case 1: 
                    equal( json.result, 'PATCHED', 'The patch should have been applied' );
                    break;
                case 2:
                    equal( json.msgType, 'edits', 'The server should have generated an edit' );
                    equal( json.clientId, clientId, 'The clientId should match. This is who made the update.' );
                    equal( json.version, 1, 'Version of the server document recieved.' );
                    equal( json.diffs[0].operation, 'UNCHANGED', 'Since we made the change now change is required.' );
                    equal( json.diffs[0].text, 'Do or do not, there is no try!', 'The text should be updated.' );
                    start();
                    break;
            }
            counter++;
        };

        ws.onerror = function( e ) {
            ok( false, 'Failed to connect to WebSocket server [' + url + ']' );
            start();
        };
    });

    test( 'Sync.Client should support creation without the new keyword', function() {
        var client = Sync.Client( { serverUrl: 'ws://localhost:7777/sync' } );
        ok( client , 'Should be no problem not using new when creating' );
    });

    test( 'serverUrl is mandatory', function() {
        throws( function() { Sync.Client() } , Error, "'serverUrl' must be specified" );
    });

    test( 'member access', function() {
        var client = Sync.Client( { serverUrl: 'ws://localhost:7777/sync' } );
        equal( client.serverUrl, undefined, 'Should not be able to access private members serverUrl' );
        equal( client.sendQueue, undefined, 'Should not be able to access private members sendQueue' );
        equal( client.ws, undefined, 'Should not be able to access private members ws' );
    });

    asyncTest('sendDoc to Sync Server', function() {
        var onmessage = function( e ) {
            var json = JSON.parse( e.data );
            equal( json.result, 'ADDED', 'Document should have been added' );
            client.disconnect();
            start();
        };
        var client = Sync.Client( {serverUrl: 'ws://localhost:7777/sync', onmessage: onmessage } );
        var documentId = uuid();
        var doc = { docId: documentId, clientId: 'js-client-test', content: 'Do or do not, there is no try.' };
        client.addDoc( doc );
        ok( client , 'Should be no problem not using new when creating' );
    });

    function uuid()
    {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function( c ) {
            var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
            return v.toString( 16 );
        });
    }

})();
